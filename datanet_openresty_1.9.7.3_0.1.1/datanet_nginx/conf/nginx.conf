
worker_processes 4;

#debug, info, notice, warn, error, crit, alert, or emerg
error_log logs/error.log info;
#error_log logs/error.log debug;

events {
  accept_mutex off;
  worker_connections 1024;
}

http {
  resolver 127.0.0.1;

  include datanet_shared_memory_tables.conf;

  init_by_lua_block {
     local conf_dname = "/usr/local/datanet/conf/";
     local conf_fname = "datanet_config";   -- NOTE: no file ending (e.g. .lua)
     local dinfo      = ngx.shared.DATANET_INFO;
     dinfo:set("ConfigDirectory", conf_dname);
     dinfo:set("ConfigFile",      conf_fname);
     require("datanet.init");
  }

  init_worker_by_lua_file /usr/local/openresty/lualib/datanet/init_worker.lua;

  server {
    listen 8080 so_keepalive=2s:2s:8;
    listen 4000 ssl so_keepalive=2s:2s:8;

    server_name         frontend0.mydomain.com;
    ssl_certificate     ./ssl/nginx.crt;
    ssl_certificate_key ./ssl/nginx.key;

    set_by_lua_file $RequestUUID ./conf/datanet_per_request_set_by_lua;

    location / {
      content_by_lua 'ngx.say("404");';
    }

    # STICKY PROCESS ROUTING
    location /sticky/ {
      proxy_pass http://backend/sticky/;
    }

    # USER SCRIPTS
    include datanet_user_scripts.conf;

    # UNIT TEST
    include datanet_test_locations.conf;
  }

  # STICKY PROCESS INTERNALS
  server {
    listen unix:/tmp/sticky_nginx_socket_;

    set_by_lua_file $RequestUUID ./conf/datanet_per_request_set_by_lua;

    log_by_lua_file /usr/local/openresty/lualib/datanet/log.lua;

    # MAIN()
    location /agent {
      content_by_lua_file ./locations/agent.lua;
      more_set_headers "Access-Control-Allow-Origin: *";
    }

    location /sticky/__debug {
      content_by_lua_file ./locations/debug.lua;
    }
    location /sticky/userinfo {
      content_by_lua_file ./locations/userinfo.lua;
    }
  }

  upstream backend {
    server 0.0.0.1;  # PLACEHOLDER
    balancer_by_lua_file /usr/local/openresty/lualib/datanet/sticky_balancer.lua;
  }

  # CLUSTER: STICKY MACHINE
  include datanet_cluster_server.conf;

  # CENTRAL CALLBACK SERVER
  include datanet_callback_server.conf;
}
